package leetcode_inta.leetcode951_1000;

/**
 * @author inta
 * @date 2020/5/22
 * @describe 在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。
 * 在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。
 *
 * 火车票有三种不同的销售方式：
 *
 *     一张为期一天的通行证售价为 costs[0] 美元；
 *     一张为期七天的通行证售价为 costs[1] 美元；
 *     一张为期三十天的通行证售价为 costs[2] 美元。
 *
 * 通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，
 * 那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。
 *
 * 返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费。
 *
 *
 *
 * 示例 1：
 *
 * 输入：days = [1,4,6,7,8,20], costs = [2,7,15]
 * 输出：11
 * 解释：
 * 例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
 * 在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。
 * 在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。
 * 在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。
 * 你总共花了 $11，并完成了你计划的每一天旅行。
 *
 * 示例 2：
 *
 * 输入：days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
 * 输出：17
 * 解释：
 * 例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
 * 在第 1 天，你花了 costs[2] = $15 买了一张为期 30 天的通行证，它将在第 1, 2, ..., 30 天生效。
 * 在第 31 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 31 天生效。
 * 你总共花了 $17，并完成了你计划的每一天旅行。
 *
 *
 *
 * 提示：
 *
 *     1 <= days.length <= 365
 *     1 <= days[i] <= 365
 *     days 按顺序严格递增
 *     costs.length == 3
 *     1 <= costs[i] <= 1000
 *
 */
//该题扩展：如果达到最少消费时，想展示出具体哪几天买哪款类型，该如何做到？
public class Q983mincostTickets {
    //看了题解有了思路，动规思想
    public int mincostTickets(int[] days, int[] costs) {
        //方便记录1-365天的情况
        int[] counts = new int[366];
        //刚开始的时候，花费为0
        counts[0] = 0;
        //分别表示三款costs的具体花费
        int costA = costs[0], costB = costs[1], costC = costs[2];
        //记录days的索引下标
        int dayIdx = 0;
        //核心思想是，一天天的挨个看最小花费情况，动规过去
        for (int i = 1; i < 366; i++) {
            //如果days的索引达到边界，就退出循环
            if (dayIdx >= days.length) {
                break;
            }
            //这里的i是天，是xx天，判断xx天是否是旅行需要的时候
            if (days[dayIdx] != i) {
                //如果不是旅行的天，那么就假定该天的花费是沿用之前一天最少的花费
                counts[i] = counts[i - 1];
            } else {
                //否则，就说明xx天是旅行的计划日，计划实现的同时，索引移到下一个计划日，++即可
                dayIdx ++;
                //按照日、周、月考虑前一状态的最小值，同时Math.max()是考虑当天前，是否存在前一日、前一周、前一月
                counts[i] = Math.min(
                                Math.min(counts[Math.max(0, i - 1)] + costA,
                                     counts[Math.max(0, i - 7)] + costB),
                                        counts[Math.max(0, i - 30)] + costC);
            }
        }
        //旅行到最后一天所需要的最小花费，就是所求解
        return counts[days[days.length - 1]];
    }
}
