package offer.V51_100;

import java.util.Arrays;

/**
 * @author inta
 * @date 2020/2/14
 * @describe 把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。
 *
 *  
 *
 * 你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。
 *
 *  
 *
 * 示例 1:
 *
 * 输入: 1
 * 输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
 * 示例 2:
 *
 * 输入: 2
 * 输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
 *  
 *
 * 限制：
 *
 * 1 <= n <= 11
 *
 */
public class V60twoSum {
    //这个不看答案真自己想不出来
    public double[] twoSum(int n) {
        //dp[i][j] i代表色子个数，j代表色子和
        double[][] dp = new double[n + 1][6 * n + 1];
        for (int i = 1; i <= 6; i ++) {
            dp[1][i] = 1.0 / 6.0;
        }
        //枚举色子个数
        for (int i = 2; i <= n; i ++) {
            //枚举色子值的和
            for (int j =  i; j <= 6 * i; j ++) {
                //枚举每个色子剔除后失去的值，值保底减1，最多不可能减去j，因为色子要用到
                for (int k = 1; k < j; k ++) {
                    dp[i][j] += dp[1][k] * dp[i - 1][j - k];
                }
            }
        }
        //返回拷贝的截取数组，索引n 到长度6 * n + 1即[n,6*n)
        return Arrays.copyOfRange(dp[n], n, 6 * n + 1);
    }
}
